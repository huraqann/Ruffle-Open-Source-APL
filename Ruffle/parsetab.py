
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftMULTDIVIDErightDEGREESQRTASSIGN DEGREE DIVIDE ID IF INT LET LFPAREN LPAREN MINUS MORE MULT NOTMORE PLUS PRINT RFPAREN RPAREN SEMICOLON SQRT STR STRS WHILE\n    expression : STR\n               | INT\n               | ID\n               | comparison\n    statement : WHILE LPAREN expression RPAREN LFPAREN program RFPARENstatement : IF LPAREN comparison RPAREN LFPAREN program RFPARENcomparison : expression MORE expressioncomparison : expression NOTMORE expressionexpression : SQRT LPAREN expression RPARENexpression : STRS LPAREN INT RPAREN\n       expression : STRS LPAREN ID RPAREN\n       expression : expression DEGREE expression\n    expression : expression MULT expression\n    \n    expression : expression DIVIDE expression\n    \n    expression : expression PLUS expression\n    \n    expression : expression MINUS expression\n    statement : LET ID ASSIGN expression SEMICOLONstatement : PRINT LPAREN expression RPAREN SEMICOLON\n    statement : PRINT LPAREN ID RPAREN SEMICOLON\n    program : statement\n            | program statement\n    '
    
_lr_action_items = {'WHILE':([0,1,2,7,38,49,50,51,52,53,57,58,59,],[3,3,-20,-21,3,3,-17,-18,-19,3,3,-5,-6,]),'IF':([0,1,2,7,38,49,50,51,52,53,57,58,59,],[4,4,-20,-21,4,4,-17,-18,-19,4,4,-5,-6,]),'LET':([0,1,2,7,38,49,50,51,52,53,57,58,59,],[5,5,-20,-21,5,5,-17,-18,-19,5,5,-5,-6,]),'PRINT':([0,1,2,7,38,49,50,51,52,53,57,58,59,],[6,6,-20,-21,6,6,-17,-18,-19,6,6,-5,-6,]),'$end':([1,2,7,50,51,52,58,59,],[0,-20,-21,-17,-18,-19,-5,-6,]),'RFPAREN':([2,7,50,51,52,53,57,58,59,],[-20,-21,-17,-18,-19,58,59,-5,-6,]),'LPAREN':([3,4,6,17,18,],[8,9,11,32,33,]),'ID':([5,8,9,11,21,25,26,27,28,29,30,31,32,33,],[10,15,15,23,15,15,15,15,15,15,15,15,15,48,]),'STR':([8,9,11,21,25,26,27,28,29,30,31,32,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'INT':([8,9,11,21,25,26,27,28,29,30,31,32,33,],[14,14,14,14,14,14,14,14,14,14,14,14,47,]),'SQRT':([8,9,11,21,25,26,27,28,29,30,31,32,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'STRS':([8,9,11,21,25,26,27,28,29,30,31,32,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'ASSIGN':([10,],[21,]),'RPAREN':([12,13,14,15,16,19,22,23,39,40,41,42,43,44,45,46,47,48,54,55,56,],[24,-1,-2,-3,-4,34,36,37,-12,-13,-14,-15,-16,-7,-8,54,55,56,-9,-10,-11,]),'DEGREE':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[25,-1,-2,-3,-4,-4,25,25,-3,25,25,25,25,25,25,25,25,25,-9,-10,-11,]),'MULT':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[26,-1,-2,-3,-4,-4,26,26,-3,26,-12,-13,-14,26,26,26,26,26,-9,-10,-11,]),'DIVIDE':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[27,-1,-2,-3,-4,-4,27,27,-3,27,-12,-13,-14,27,27,27,27,27,-9,-10,-11,]),'PLUS':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[28,-1,-2,-3,-4,-4,28,28,-3,28,-12,-13,-14,-15,-16,28,28,28,-9,-10,-11,]),'MINUS':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[29,-1,-2,-3,-4,-4,29,29,-3,29,-12,-13,-14,-15,-16,29,29,29,-9,-10,-11,]),'MORE':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[30,-1,-2,-3,-4,-4,30,30,-3,30,-12,-13,-14,-15,-16,30,30,30,-9,-10,-11,]),'NOTMORE':([12,13,14,15,16,19,20,22,23,35,39,40,41,42,43,44,45,46,54,55,56,],[31,-1,-2,-3,-4,-4,31,31,-3,31,-12,-13,-14,-15,-16,31,31,31,-9,-10,-11,]),'SEMICOLON':([13,14,15,16,35,36,37,39,40,41,42,43,44,45,54,55,56,],[-1,-2,-3,-4,50,51,52,-12,-13,-14,-15,-16,-7,-8,-9,-10,-11,]),'LFPAREN':([24,34,],[38,49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,38,49,],[1,53,57,]),'statement':([0,1,38,49,53,57,],[2,7,2,2,7,7,]),'expression':([8,9,11,21,25,26,27,28,29,30,31,32,],[12,20,22,35,39,40,41,42,43,44,45,46,]),'comparison':([8,9,11,21,25,26,27,28,29,30,31,32,],[16,19,16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('expression -> STR','expression',1,'p_expression','lexer.py',100),
  ('expression -> INT','expression',1,'p_expression','lexer.py',101),
  ('expression -> ID','expression',1,'p_expression','lexer.py',102),
  ('expression -> comparison','expression',1,'p_expression','lexer.py',103),
  ('statement -> WHILE LPAREN expression RPAREN LFPAREN program RFPAREN','statement',7,'p_statement_while','lexer.py',108),
  ('statement -> IF LPAREN comparison RPAREN LFPAREN program RFPAREN','statement',7,'p_statement_if','lexer.py',111),
  ('comparison -> expression MORE expression','comparison',3,'p_comparison_more','lexer.py',116),
  ('comparison -> expression NOTMORE expression','comparison',3,'p_comparison_notmore','lexer.py',122),
  ('expression -> SQRT LPAREN expression RPAREN','expression',4,'p_expression_sqrt','lexer.py',128),
  ('expression -> STRS LPAREN INT RPAREN','expression',4,'p_expression_strs','lexer.py',132),
  ('expression -> STRS LPAREN ID RPAREN','expression',4,'p_expression_strs','lexer.py',133),
  ('expression -> expression DEGREE expression','expression',3,'p_expression_degree','lexer.py',138),
  ('expression -> expression MULT expression','expression',3,'p_expression_multiply','lexer.py',144),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_divide','lexer.py',151),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','lexer.py',158),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','lexer.py',167),
  ('statement -> LET ID ASSIGN expression SEMICOLON','statement',5,'p_statement_assign','lexer.py',175),
  ('statement -> PRINT LPAREN expression RPAREN SEMICOLON','statement',5,'p_statement_print','lexer.py',181),
  ('statement -> PRINT LPAREN ID RPAREN SEMICOLON','statement',5,'p_statement_printid','lexer.py',188),
  ('program -> statement','program',1,'p_program','lexer.py',194),
  ('program -> program statement','program',2,'p_program','lexer.py',195),
]
